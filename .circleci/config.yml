# udapeople-kphtj0mlze7sdpz43
# Get an EIP (Elastic IP) which is free when the instance is running but paid 
# a bit when the instance is stopped.
# A mime multi-part file allows your script to override how frequently user data 
# is run in the cloud-init package. Then, the file runs the user script
# 
#
#
#
#
#
#
#
#
#
#
version: 2.1
commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
      - run:
          name: "Destroy Backend and Frontend environment"
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/CNXVssXp4xn36vXQNvVzgY/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
      
 #           curl https://kvdb.io/CNXVssXp4xn36vXQNvVzgY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
 
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install -g typescript
            npm init -y &&  npm i typescript --save-dev &&  npx tsc --init
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test   
  test-backend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test  

  scan-frontend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend dependencies
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
              npm update mkdirp --depth 4
              run npm audit fix
  scan-backend:
    docker:
      # Docker image that is compatible with NodeJS.
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here  npm install --save-dev webpack@5.72.0  webpack@^4.37.0 || ^5.0.0
      #  removed    npm cache clean -f        from commands below... where the blank line is on line 157      
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
              cd backend
              npm install
              npm audit fix         

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .cimg/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  # 29th commit  in file - backend/src/migrations/1549398619849-FixProductIdTable.ts  and per mentor 
  # suggestion, inserted the line-  awaitqueryRunner.query(); after line 11, which made the
  # insertion become line 12            
  # awaitqueryRunner.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`);

  # in package.json reverted class-validator from ^0.12.2 back to ^0.9.1 per mentor suggestion
  # in package.json reverted standard-version from ^7.0.0 back to ^4.4.0 per mentor suggestion 

  # in package.json changed class-validator from ^0.9.1 to ^0.12.2
  # in package.json changed standard-version from ^4.4.0 to  ^7.0.0
  #
  #
  #
  #
  #
  #
      - run:  
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .cimg/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: check directory and files
          command: pwd && ls

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .cimg/ansible/inventory.txt   
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .cimg/ansible/inventory.txt
            cat .cimg/ansible/inventory.txt  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.cimg/ansible/inventory.txt

      # - destroy-environment:backend
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
  
  configure-infrastructure:
    docker:
      - image: cimg/python:3.9 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a1:e8:06:8d:07:a0:7d:68:90:63:00:85:54:8c:6c:7b"]
      - attach_workspace:
          at: ~/
       
      - run:
          name: Install dependencies
          command: |
            pip3 install ansible awscli
            sudo apt-get install -y tar gzip
      - run:
          name: Configure server
          command: |
            # code added here
            pwd
            cat .cimg/ansible/inventory.txt
            echo ENVIRONMENT=production > "backend/.env"
            ls
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            # upto here new        
            cd .cimg/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m

      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          
      - run:
         name: Install awscli
         command: |
           sudo apt-get update
           sudo apt-get install -y awscli curl   
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m

      - run:
          name: Send migration status to kvdb.io 
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/CNXVssXp4xn36vXQNvVzgY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

            fi

      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
        user: root

    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: | 
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum install python3-pip -y

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            npm audit fix
            npm audit fix --force
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
# 6f:81:be:b5:62:71:fa:40:63:3d:74:23:ba:19:fc:de -cimg deployment key
# a1:e8:06:8d:07:a0:7d:68:90:63:00:85:54:8c:6c:7b personal fingerprint key
# a1:e8:06:8d:07:a0:7d:68:90:63:00:85:54:8c:6c:7b
# SHA256:BBZj7unaL8dp4j+sTnp4Br1otcDDXAEoj7q6w8j8Mtg - GitHub
# SHA256:3+wXPh9gFyylnpA+bHPfugrwWh+fhaJHpFLX/RzX3J4 - cimg
# ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIApDad3yDw/7/tEpHKiRXcoB2joX7iTYEMa7ZIBZdQi7 udacity.test.accoount@gmail.com
# cimg
# c5:38:30:4a:4f:1b:cc:86:67:5c:e0:fe:b3:ed:54:fc
# Added on Aug 17, 2022 by cimg with authorization from @UdacityTestAcctAWS
# chmod 400
# export ANSIBLE_HOST_KEY_CHECKING=False

  deploy-backend:
    docker: 
      - image: python:3.7-alpine3.11 
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["c5:38:30:4a:4f:1b:cc:86:67:5c:e0:fe:b3:ed:54:fc"]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |

            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            aws --version
            

          
      - run:
          name: Deploy backend

          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz . 
            pwd
            ls
            cd .cimg/ansible
            echo "Contents of the inventory.txt file are -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
          
      - run:
          name: Wait for the app to start 
          no_output_timeout: 30m
          command: python -m unittest


      # - destroy-environment: 
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Backend smoke test.
          command: |
            echo "Wait for backend to become available..."
            sleep 60s
            echo "Attempting to reach backend..."
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" 
              then
                return 0
              else
                return 1
            fi
            
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              
              return 0
            else
              return 1
            fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs

      # udapeople-kphtj0mlze7sdpz43 s3 bucket name
      # udapeople-kphtj0mlze7sdpz99 s3 bucket name
      # udapeople-kphtj0mlze7sfsx77 s3 bucket name

      # - run:
      #     name: Update cloudfront distribution
      #     command: |
            # Change the initial stack name, as applicable to you
            # aws cloudformation deploy \
            #         --template-file .cimg/files/cloudfront.yml \
            #         --stack-name InitialStack \
            #         --region us-east-1 \
            #         --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            #         --tags project=udapeople
      - run:
          name: Update cloudfront distribution
          command: |
            
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name udapeople-cloudfront \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure udapeople-kphtj0mlze7sfsu58
      - revert-migrations
#     - destroy-environment  







      # - run:
      #     name: Update cloudfront distribution
      #     command: |
            
      #       aws cloudformation update-stack \
      #         --use-previous-template \
      #         --stack-name udapeople-cloudfront \
      #         --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
       

      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"        
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter "CREATE_COMPLETE" --no-paginate --output text) 
            echo Stack names: "${STACKS[@]}"

            if [[ "${OldWorkflowID}" =~ "${CIRCLE_WORKFLOW_ID:0:7}" ]]
            then
              echo "-------------- Cleanup in progress -----------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "--------------- Cleanup failed----------------------"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]          
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]

# awaitqueryRunner.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`);
# backend/src/migrations/1549398619849-FixProductIdTable.ts 
# at line 83, added npm install typescript --loglevel verbose per mentor suggestion
#
# awaitqueryRunner.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`);


# 4th commit  in file - backend/src/migrations/1549398619849-FixProductIdTable.ts  and per mentor 
# suggestion, inserted the line-  awaitqueryRunner.query(); after line 11, which made the
# insertion become line 13            
# awaitqueryRunner.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`);

          # name: backend scan
          # command: |
          #     cd backend
          #     npm install
                          
          #     npm audit fix         
          #     npm audit fix --audit-level=critical --force
          #     npm audit --audit-level=critical
# npm WARN using --force Recommended protections disabled.
# npm ERR! code EACCES
# npm ERR! syscall unlink
# npm ERR! path /home/patti-awesome/.npm/_cacache/content-v2/sha512/a1/24/5864bda5959632255583b204b233e18acbaf27ff9068efc9f49678d8ccdffc9458bd6276e5606cf6771be78fe774497829e06b7c7992e19497b4797d3c35
# npm ERR! errno -13
# npm ERR! 
# npm ERR! Your cache folder contains root-owned files, due to a bug in
# npm ERR! previous versions of npm which has since been addressed.
# npm ERR! 
# npm ERR! To permanently fix this problem, please run:
# npm ERR!   sudo chown -R 1000:1000 "/home/patti-awesome/.npm"

# npm ERR! A complete log of this run can be found in:
# npm ERR!     /home/patti-awesome/.npm/_logs/2022-08-28T06_25_34_957Z-debug-0.log
#
#
#
